@page "/Fuente"
@page "/Fuente/{id}"
@inject IFuenteService FuenteService

@if (Id == null)
{
    <h3>Create a new Fuente</h3>

}
else
{
    <h3>Edit "@fuente.IdFuente"!</h3>
}

<EditForm Model="fuente" OnSubmit="HadleSubmit">
    <div>
        <label for="cadenaFuente">Cadena Fuente</label>
        <InputText id="cadenaFuente" @bind-Value="fuente.CadenaFuente" class="form-control"></InputText>
    </div>
    @*<div>
        <label for="developer">Developer</label>
        <InputText id="developer" @bind-Value="Fuente.Developer" class="form-control"></InputText>
    </div>
    <div>
        <label for="release">Release</label>
        <InputDate id="release" @bind-Value="Fuente.Release" class="form-control"></InputDate>
    </div>*@
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteFuente">Delete Fuente</button>
</EditForm>



@code {
    [Parameter]
    public string? Id { get; set; }

    string btnText = string.Empty;

    Models.Fuente fuente = new();

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save New Fuente" : "Update Fuente";
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            fuente = await FuenteService.GetSingleFuente((string) Id);
        }
    }

    async Task HadleSubmit()
    {
        if (Id == null)
        {
            await FuenteService.CreateFuente(fuente);
        }
        else
        {
            await FuenteService.UpdateFuente(fuente, (string)Id);
        }
    }

    async Task DeleteFuente()
    {
        await FuenteService.DeleteFuente(fuente.IdFuente);
    }
}
