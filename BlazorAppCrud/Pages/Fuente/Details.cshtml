@*@model Models.Fuente
@using Models
@using System.Collections
@using System.Threading.Tasks

@{ ViewBag.Title = "Details";;}

<h2>Detalle de la Fuente</h2>
<!-- Button trigger modal -->
<div>
    <p>
        <a class="btn" href='@Url.Action("Index", "Fuente")'>Volver a la Lista</a>
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" style="width:100px; float:right; margin-bottom:10px;">
            Manual
        </button>
    </p>
</div>
<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="exampleModalLabel" style="color:black">Detalles de la Fuente</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="color:black">
                <p>
                    <h5>En esta vista se muestran el detalle de la Fuente seleccionada</h5> <br />

                    <b>Cantiad de simbolos: </b> Se refiere a la cantidad de simbolos distintos que posee la fuente <br />
                    <b>Secuencia de simbolos: </b> Muestra la Cadena con la que se originó la fuente<br />
                    <b>Entropia Maxima: </b> Es la informacion promedio que tendria la fuente si todos sus simbolos fueran
                    igualmente probales. <br />
                    <b>Cadena Codificada: </b> Muestra la Cadena con la que se originó la fuente, pero ya codificada con 0 y 1<br />

                    <b>Entropia de la Fuente: </b> Esta es menor a la Entropia maxima ya que hay simbolos
                    que son mas probables que aparezcan y por tanto con una menor informacion asociada
                    lo que disminuye la informacion promedio de la fuente. <br />
                    <b>Informacion de la Cadena: </b> Informacion total del mensaje, segun la formula: <br />
                    Sumatoria de las informaciones individuales de cada simbolo

                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!--Tabla horizontal con los datos de la fuente-->
<div>
    <h4>Fuente</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            Cantidad de Simbolos:
        </dt>

        <dd>
            @Html.DisplayFor(model => model.N)
        </dd>

        <dt>
            Simbolos:
        </dt>

        <dd>
            @Html.DisplayFor(model => model.CadenaFuente)
        </dd>

        <dt>
            Cadena Decodificada:
        </dt>

        <dd>
            @Model.DecodificarHuffman()
        </dd>

        <dt>
            Entropia Maxima:
        </dt>

        <dd>
            @Model.EntropiaMaxima.ToString("0.##") bit/simbolo
        </dd>

        <dt>
            Cadena Codificada:
        </dt>

        <dd>
            @if (@Model.CadenaCodificada.Length > 150)
            {
                <p id="CadenaCodificada" style="word-wrap: break-word; max-width: 300ch;">
                    @Model.CadenaCodificada.Substring(0, 100)...
                    <button type="button" class="btn btn-primary pull-right" href="#" Onclick="ShowMore()">Mostrar mas</button>
                </p>
            }
            else
            {
                <p style="word-wrap: break-word;">
                    @Model.CadenaCodificada
                </p>
            }

        </dd>

        <dt>
            Entropia de la Fuente:
        </dt>

        <dd>
            @Model.EntropiaDeLaFuente.ToString("0.##") bit /simbolo
        </dd>
        <dt>
            Informacion total:
        </dt>

        <dd>
            @Model.InformacionDeCadena().ToString("0.##") bit
        </dd>

    </dl>
</div>

<!--Informaicon de las letras-->
<div style="flex-wrap:wrap">
    <table>
        <tr>
            <!--Grafico del Histograma-->
            <td style="border-radius: 5px;">
                <canvas id="myChart"></canvas>
            </td>
        </tr>
        <tr>
            <td style="border-radius: 5px;">
                <!--Tabla Con informacion de cada letra-->
                <table class="table">
                    <tr style="border-radius: 5px;">
                        <th>
                            Letra
                        </th>
                        <th>
                            Probabilidad
                        </th>
                        <th>
                            Informacion
                        </th>
                        <th>
                            Codigo
                        </th>
                        <th>
                            Frecuencia de aparicion
                        </th>
                        <th></th>
                    </tr>
                    @foreach (var item in Model.Letras.OrderByDescending(x => x.FrecuenciaDeAparicion))
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Name)
                            </td>
                            <td>
                                @((item.Probability*100).ToString("0.##")) %
                            </td>
                            <td>
                                @item.Information.ToString("0.##") bit
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Codigo)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.FrecuenciaDeAparicion)
                            </td>
                        </tr>
                    }
                </table>
            </td>
        </tr>
    </table>
</div>

@functions{


    public string GetCodigoCorto()
    {

        return @Model.CadenaCodificada.Length > 150 ? Model.CadenaCodificada.Substring(0, 100) + "..." : Model.CadenaCodificada;
    }
}

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    const ctx = document.getElementById('myChart');

    const probability = @Html.Raw(Json.Encode(ViewData["Probability"]));
    const name = @Html.Raw(Json.Encode(ViewData["Name"]));

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: name,
            datasets: [{
                label: 'Probabilidad de aparicion de cada letra',
                data: probability,
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    </script>
    <script>
        function ShowMore() {
            if (@Model.CadenaCodificada.Length > 100) {

                $("#CadenaCodificada").html('@Model.CadenaCodificada');
                $("#CadenaCodificada").append('<button type="button" class="btn btn-primary pull-right" href="#" Onclick="ShowLess()">Mostrar menos</button>');
            }
    }
        function ShowLess() {
            if (@Model.CadenaCodificada.Length > 100) {
                $("#CadenaCodificada").html('@GetCodigoCorto()');
                $("#CadenaCodificada").append('<button type="button" class="btn btn-primary pull-right" href="#" Onclick="ShowMore()">Mostrar mas</button>');
            }
    }
    </script>
}
<p><a class="btn" href='@Url.Action("Index", "Fuente")'>Volver a la Lista</a></p>*@